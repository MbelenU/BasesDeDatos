												---------------CREACION BASE DE DATOS-----------------

 create database  BAUXITA_v2
 
 use BAUXITA_v2

go

--Cliente
 create table Cliente
 (
	Nro_Cliente int primary key identity not null,
	Apellido varchar (30),
	Nombre varchar (30) 	
 );

insert into Cliente (Apellido, Nombre) values ('Barrientos','Julian');
insert into Cliente (Apellido, Nombre) values ('Artaza','Florencia');
insert into Cliente (Apellido, Nombre) values ('Torres','Leonel');
insert into Cliente (Apellido, Nombre) values ('Paz','Lucia');
insert into Cliente (Apellido, Nombre) values ('Caseres','Julieta');
 go

--Orden Compra
 create table Orden_Compra 
(
	Nro_Orden int primary key identity not null,
	Nro_Cliente int not null,
	Fecha date, 
	constraint fk_Cliente foreign key (Nro_Cliente) references Cliente (Nro_Cliente)
);

insert into Orden_Compra (Nro_Cliente, Fecha) values (1,'2/6/2018');
insert into Orden_Compra (Nro_Cliente, Fecha) values (2,'10/6/2019');
insert into Orden_Compra (Nro_Cliente, Fecha) values (1,'21/2/2020');
insert into Orden_Compra (Nro_Cliente, Fecha) values (3,'10/8/2021');
insert into Orden_Compra (Nro_Cliente, Fecha) values (5,'1/5/2021');
go

--Familia_Mineral
 create table Familia_Mineral
(
	ID_Familia_Mineral tinyint primary key identity not null,
	Familia varchar (30),
	Descripcion text,
);

insert into Familia_Mineral (Familia, Descripcion) values ('cales','oxido de calcio')
insert into Familia_Mineral (Familia, Descripcion) values ('carbonatos','sales de acido carbonico')
insert into Familia_Mineral (Familia, Descripcion) values ('calcitas','carbonato calcico')
go

--Mineral
 create table Mineral
(		
	ID_Mineral smallint primary key identity not null,
	ID_Familia_Mineral tinyint not null,
	Mineral varchar (30),
	Stock smallint constraint CK_Mineral_Stock check (Stock>=0),
	Precio float constraint CK_Mineral_Precio check (Precio>=0)
	constraint FK_Familia_Mineral foreign key (ID_Familia_Mineral) references Familia_Mineral (ID_Familia_Mineral)
);

insert into Mineral (ID_Familia_Mineral, Mineral, Stock, Precio) values (2,'cales calcicas',1000,7900)
insert into Mineral (ID_Familia_Mineral, Mineral, Stock, Precio) values(3,'malaquita',2000,11350)
insert into Mineral (ID_Familia_Mineral, Mineral, Stock, Precio) values (1,'onix mexicano',5000,9500)
insert into Mineral (ID_Familia_Mineral, Mineral, Stock, Precio) values (1,'cuarzo',500,6000)
insert into Mineral (ID_Familia_Mineral, Mineral, Stock, Precio) values (1,'Esmeralda',0,6000)
go

--Detalle Orden Compra
 create table Detalle_Orden_Compra
(
	Nro_Detalle int primary key identity not null,
	Nro_Orden  int not null,
	ID_Mineral smallint not null, 
	Cantidad smallint constraint CK_Detalle_Orden_Compra_Cantidad check (Cantidad>0),
	Precio smallmoney constraint CK_Detalle_Orden_Compra_Precio check (Precio>0),
	Descuento tinyint constraint CK_Detalle_Orden_Compra_Descuento check (Descuento>=0)
	constraint FK_Orden_Compra foreign key (Nro_Orden) references Orden_Compra (Nro_Orden),
	constraint FK_Mineral foreign key (ID_Mineral) references Mineral (ID_Mineral)
);

insert into Detalle_orden_compra (Nro_orden, ID_Mineral, cantidad, precio, descuento) values (1,1,10,79000,10);
insert into Detalle_orden_compra (Nro_orden, ID_Mineral, cantidad, precio, descuento) values (3,2,30,8512, 25);
insert into Detalle_orden_compra (Nro_orden, ID_Mineral, cantidad, precio, descuento) values (2,1,20,11112,30);
insert into Detalle_orden_compra (Nro_orden, ID_Mineral, cantidad, precio, descuento) values (4,1,32,10112,15);
insert into Detalle_orden_compra (Nro_orden, ID_Mineral, cantidad, precio, descuento) values (4,3,5,26000,15);
go

--Yacimiento
create table Yacimiento
(
	ID_Yacimiento smallint primary key identity not null,
	ID_Mineral smallint not null,
	Nombre varchar (30),
	constraint FK_Yacimiento foreign key (ID_Mineral) references Mineral (ID_Mineral)
);

insert into Yacimiento (ID_Mineral, Nombre) values (1,'Manantial Espejo');
insert into Yacimiento (ID_Mineral, Nombre) values (2,'Mina Pirquitas');
insert into Yacimiento (ID_Mineral, Nombre) values (3,'Mina Martha');
go

--Financiamiento
create table Financiamiento 
 (
	ID_Financiamiento tinyint primary key identity not null,
	Financiamiento varchar (50),
 );

insert into Financiamiento (Financiamiento) values ('Propio')
insert into Financiamiento (Financiamiento) values ('Mercado Interno')
insert into Financiamiento (Financiamiento) values ('Mercado Internacional');
go

--Inversion
create table Inversion 
 (
	ID_Inversion int primary key identity not null,
	ID_Financiamiento tinyint default null,
	Duracion tinyint constraint CK_Inversion_Duracion check (Duracion>0), ---La duracion esta estimidad en años--
	Monto money constraint CK_Inversion_Monto check  (Monto>=0),
	Rentabilidad tinyint constraint CK_Inversion_Rentabilidad check (Rentabilidad>=0),
	constraint FK_Inversion_Financiamiento foreign key (ID_Financiamiento) references Financiamiento (ID_Financiamiento)
 );

insert into Inversion (ID_Financiamiento, Duracion, Monto, Rentabilidad) values (1,10,2543000, 80);
insert into Inversion (ID_Financiamiento, Duracion, Monto, Rentabilidad) values (2,5,1234500, 65);
insert into Inversion (ID_Financiamiento, Duracion, Monto, Rentabilidad) values (2,20,4523450, 50);
go

--Esta Compuesto
create table Esta_Compuesto
(
	ID_Inversion int not null,
	ID_Yacimiento smallint not null
	constraint PK_Esta_Compuesto primary key (ID_Inversion,ID_Yacimiento),
	constraint FK_ID_Inversion foreign key (ID_Inversion) references Inversion (ID_Inversion),
	constraint FK_ID_Yacimiento foreign key (ID_Yacimiento) references Yacimiento (ID_Yacimiento)
);

insert into Esta_Compuesto (ID_Inversion, ID_Yacimiento) values (1,2);
insert into Esta_Compuesto (ID_Inversion, ID_Yacimiento) values (2,3);
insert into Esta_Compuesto (ID_Inversion, ID_Yacimiento) values (3,1);
go

--Provincia
 create table Provincia
(
	Nro_Provincia tinyint primary key identity not null,
	Provincia varchar (30)
);

insert into Provincia (Provincia) values ('Neuquen');
insert into Provincia (Provincia) values ('Santa Cruz');
insert into Provincia (Provincia) values ('Jujuy');
insert into Provincia (Provincia) values ('Buenos Aires');
insert into Provincia (Provincia) values ('Cordoba');
go

--Localidad
 create table Localidad
(
	Nro_Localidad smallint primary key identity not null,
	Nro_Provincia tinyint not null,
	Localidad varchar (30),
	Codigo_Postal varchar (50),
	constraint FK_Localidad_Provincia foreign key (Nro_Provincia) references Provincia (Nro_Provincia),
);

insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (4,'Ezeiza','1804');
insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (2,'Gobernador Gregores','Z9311');
insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (3,'Abra Pampa','Y4640');
insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (1,'Mariano Moreno','8351');
insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (1,'Las Lajas','73319');
insert into Localidad (Nro_Provincia, Localidad, Codigo_Postal) values (4,'Turdera','50601');
go

--Concesion Explotacion
create table Concesion_Explotacion 
(
	Nro_Resolucion smallint primary key identity not null,
	Vigencia_Inicio date,
	Vigencia_Hasta date,
	Nro_Catastro varchar (30), ---Un Catastro es alfanumerico---
	Canon tinyint constraint CK_Concesion_Explotacion_Canon Check (Canon>=0)
);

insert into Concesion_Explotacion (Vigencia_Inicio, Vigencia_Hasta, Nro_Catastro, Canon) values ('1/3/2019','5/10/2021','AA1',30)
insert into Concesion_Explotacion (Vigencia_Inicio, Vigencia_Hasta, Nro_Catastro, Canon) values ('29/4/2016','11/12/2021','AB2',50)
insert into Concesion_Explotacion (Vigencia_Inicio, Vigencia_Hasta, Nro_Catastro, Canon) values ('29/4/2016','11/4/2022','AC3',10)
go

--Estudio Suelo
 create table Estudio_Suelo
(
	ID_Estudio smallint primary key identity not null,
	Nro_Localidad smallint not null,
	Nro_Provincia tinyint not null,
	Nro_Resolucion smallint default null,
	Costo money constraint CK_Estudio_Costo check (Costo>=0),
	Resultado Varchar (30) constraint CK_Estudio_Resultado check (Resultado in ('Satisfactorio','No satisfactorio','satifactorio','no satisfactorio')),
	Prolongacion tinyint constraint CK_Estudio_Prologancion check (Prolongacion<=27), ---Estimado en dias---
	constraint FK_Estudio_Localidad foreign key (Nro_Localidad) references Localidad (Nro_Localidad),
	constraint FK_Estudio_Provincia foreign key (Nro_Provincia) references Provincia (Nro_Provincia),
	constraint FK_Concesion_Explotacion foreign key (Nro_Resolucion) references Concesion_Explotacion (Nro_Resolucion),
);

insert into Estudio_Suelo (Nro_Localidad, Nro_Provincia, Nro_Resolucion, Costo, Resultado, Prolongacion) values (2,2,1,1500000,'Satisfactorio',10)
insert into Estudio_Suelo (Nro_Localidad, Nro_Provincia, Nro_Resolucion, Costo, Resultado, Prolongacion) values (1,4,null,35200000,'No satisfactorio',6)
insert into Estudio_Suelo (Nro_Localidad, Nro_Provincia, Nro_Resolucion, Costo, Resultado, Prolongacion) values (4,1,2,5005000,'Satisfactorio',3)
insert into Estudio_Suelo (Nro_Localidad, Nro_Provincia, Nro_Resolucion, Costo, Resultado, Prolongacion) values (3,3,null,41200000,'No satisfactorio',15)
insert into Estudio_Suelo (Nro_Localidad, Nro_Provincia, Nro_Resolucion, Costo, Resultado, Prolongacion) values (3,4,3,1000000,'Satisfactorio',25)
go

--Contiene
 create table Contiene
(
	ID_Estudio smallint not null,
	ID_Mineral smallint not null,
	constraint PK_Contiene primary key (ID_Estudio,ID_Mineral),
	constraint FK_Contiene_Estudio_Suelo foreign key (ID_Estudio) references Estudio_Suelo (ID_Estudio),
	constraint FK_Contiene_Mineral foreign key (ID_Estudio) references Estudio_Suelo (ID_Estudio),
);

insert into Contiene (ID_Mineral,ID_Estudio) values (1,1)
insert into Contiene (ID_Mineral,ID_Estudio) values (2,1)
insert into Contiene (ID_Mineral,ID_Estudio) values (3,1)
insert into Contiene (ID_Mineral,ID_Estudio) values (5,2)
insert into Contiene (ID_Mineral,ID_Estudio) values (4,2)
insert into Contiene (ID_Mineral,ID_Estudio) values (5,3)
insert into Contiene (ID_Mineral,ID_Estudio) values (2,4)
insert into Contiene (ID_Mineral,ID_Estudio) values (4,4)
insert into Contiene (ID_Mineral,ID_Estudio) values (1,4)
insert into Contiene (ID_Mineral,ID_Estudio) values (1,5)
insert into Contiene (ID_Mineral,ID_Estudio) values (3,5)
go

--Rubro
create table Rubro
 (
	Nro_Rubro tinyint primary key identity not null,
	Rubro varchar (50)
 );

insert into Rubro (Rubro) values ('Extraccion');
insert into Rubro (Rubro) values ('Fraccionado');
go

--Actividad
create table Actividad 
 (
	ID_Actividad tinyint  primary key identity not null,
	Actividad varchar (50)
 );

insert into Actividad (Actividad) values ('Explotacion');
insert into Actividad (Actividad) values ('Fraccionado');
insert into Actividad (Actividad) values ('Comercializacion');
insert into Actividad (Actividad) values ('Administracion');
insert into Actividad (Actividad) values ('Deposito');
go

--Establecimiento
create table Establecimiento
(
	Nro_Establecimiento smallint primary key identity not null,
	Nro_Rubro tinyint not null, 
	ID_Actividad tinyint not null,
	Nro_Localidad smallint not null, 
	Nro_Provincia tinyint not null,
	Nombre varchar (30),
	Calle varchar (30),
	Numero smallint constraint CK_Establecimiento_Numero check (Numero>0),
	Piso tinyint constraint CK_Establecimiento_Piso check (Piso>=0),
	constraint FK_Rubro foreign key (Nro_Rubro) references Rubro (Nro_Rubro),
	constraint FK_Actividad foreign Key (ID_Actividad) references Actividad (ID_Actividad),
	constraint FK_Establecimiento_Localidad foreign key (Nro_Localidad) references Localidad (Nro_Localidad),
	constraint FK_Establecimiento_Provincia foreign key (Nro_Provincia) references Provincia (Nro_Provincia)
);

insert into Establecimiento (Nro_Rubro, ID_Actividad, Nro_Localidad, Nro_Provincia, Nombre, Calle, Numero, Piso) values(1,3,5,1,'Rubi','Aguero',2342,2);
insert into Establecimiento (Nro_Rubro, ID_Actividad, Nro_Localidad, Nro_Provincia, Nombre, Calle, Numero, Piso) values	(2,1,4,4,'Esmeralda','San Juan',2202,5);
insert into Establecimiento (Nro_Rubro, ID_Actividad, Nro_Localidad, Nro_Provincia, Nombre, Calle, Numero, Piso) values	(2,2,3,5,'Topacio','Chaco',1342,1);
insert into Establecimiento (Nro_Rubro, ID_Actividad, Nro_Localidad, Nro_Provincia, Nombre, Calle, Numero, Piso) values	(2,4,6,4,'Zafiro','ituzaingo',2142,null);
go

													-------------------SELECT---------------------

--Cliente
select Nro_Cliente as 'Numero de Cliente', Apellido, Nombre
from Cliente;

--Orden Compra
select Nro_Orden,Nro_Cliente,Fecha
from Orden_Compra;

--Familia Mineral
select ID_Familia_Mineral ,Familia, Descripcion
from Familia_Mineral;

--Mineral
select ID_Mineral,ID_Familia_Mineral,Mineral,Stock,Precio
from Mineral;

--Detalle Orden de Compra
select Nro_Detalle, Nro_orden, ID_Mineral, cantidad, precio, descuento
from Detalle_Orden_Compra;

--Yacimiento
select ID_Yacimiento,ID_Mineral, Nombre as 'Yacimiento'
from Yacimiento;

--Financiamiento
select ID_Financiamiento,Financiamiento
from Financiamiento;

--Inversion
select ID_Inversion,ID_Financiamiento,Duracion, Monto, Rentabilidad
from Inversion;

--Esta Compuesto
select ID_Inversion, ID_Yacimiento
from Esta_Compuesto;

--Provincia
select Nro_Provincia,Provincia
from Provincia;

--Localidad
select Nro_Localidad,Nro_Provincia,Localidad,Codigo_Postal as 'Codigo Postal'
from Localidad;

--Concesion de Explotacion 
select Nro_Resolucion,Vigencia_Inicio,Vigencia_Hasta,Nro_Catastro,Canon
from Concesion_Explotacion;

--Estudio del Suelo
select ID_Estudio,Nro_Localidad,Nro_Provincia,Nro_Resolucion,Costo,Resultado,Prolongacion
from Estudio_Suelo;

--Contiene
Select ID_Mineral,ID_Estudio
from Contiene;

--Rubro
select Nro_Rubro,Rubro
from Rubro;

--Actividad
select	ID_Actividad,Actividad
From Actividad;

--Establecimiento
select Nro_Establecimiento,Nro_Rubro,ID_Actividad,Nro_Localidad,Nro_Provincia,Nombre,Calle,Numero,Piso
from Establecimiento;
go
													
													----------OPERACIONES-----------
--Update
update Cliente 
	set Nombre='Arthur',
		Apellido='Leywin'
	where Nro_Cliente=2;

--Delete
Delete from Establecimiento 
where Nro_Rubro=2;

--Inner Join 
select C.Apellido,C.Nombre, O.Nro_Orden, O.Fecha
from Cliente as C
	inner join Orden_Compra as O
	on C.Nro_Cliente=O.Nro_Cliente;

--Select con IN
select Nro_Localidad,Costo,Prolongacion, Resultado
from Estudio_Suelo
where Resultado in ('Satisfactorio')

--Select con Or
select Nro_Orden, Precio,Cantidad
from Detalle_Orden_Compra
where Precio >14000 or Cantidad <=8

--Group by
select Nro_Orden, avg (Cantidad) as 'Total Cantidad', sum (Precio) as 'Precio Total'
from Detalle_Orden_Compra
where Nro_Orden in (4,2)
group by Nro_Orden;

--Select Count
select count (ID_Familia_Mineral) as 'Cantidad De Familias'
from Mineral;

--IF
--Mostramos ID_Mineral,ID_Familia_Mineral,Mineral,Stock,Precio de de la tabla Mineral donde el stock >0
--En caso que no haya, mostramos un mensaje

if exists (select ID_Mineral,ID_Familia_Mineral,Mineral,Stock,Precio from Mineral where Stock>0)
 (select Mineral,Precio from Mineral )
else
 select 'No hay Mineral sin stock';

--IF
-- Hacemos un aumentamos un 10% a todos los minerales donde ID_Familia_Mineral = 1
-- si no hay, mostramos un mensaje:

if exists (select * from Mineral where ID_Familia_Mineral = 1)
begin
  update Mineral set precio=precio+(precio*0.1)where ID_Familia_Mineral=1
  select 'Precios actualizados'
end
else
  select 'no hay registros actualizados';

-- Veamos si se actualizaron:
select * from Mineral where ID_Familia_Mineral=1;

--IF
-- Eliminamos los Detalle_Orden_Compra de los cuales cantidad <=5; 
-- si no hay, mostramos un mensaje:

if exists (select * from Detalle_Orden_Compra where Cantidad<=5)
  delete from Detalle_Orden_Compra where Cantidad<=5
else
  select 'No hay registros eliminados';

--IF
-- Ejecutamos nuevamente la sentencia anterior (Ahora se ejecuta la sentencia
-- del "else" porque no hay registros que cumplieran la condición.):

if exists (select * from Detalle_Orden_Compra where Cantidad<=5)
  delete from Detalle_Orden_Compra where Cantidad<=5
  select 'No hay registros eliminados';

--Variable
declare @Nombre varchar (50);  
declare @Nombre2 varchar (50);
set @Nombre='Rubi';
set @Nombre2='Esmeralda';

select ID_Actividad, Nombre from Establecimiento where Nombre in (@Nombre,@Nombre2);

--Variable
declare @mayorprecio float
select @mayorprecio = max(Precio) from Mineral

select *from Mineral where Precio = @mayorprecio;


--Queremos mostrar el nombre y precio cada mineral en una columna
--extra llamada "condicion" empleamos un case que testee el stock
-- y muestre un mensaje diferente según el stock:
select Mineral, Precio, Condicion =
 case 
  when Stock>0 then 'Hay stock'
  when Stock<=0 then 'No hay stock'
 else 'No existe producto'
 end
 from Mineral;

 -- Vamos a agregar el campo "condicion" a la tabla:
alter table Mineral
  add condicion varchar(20);

go

--Borramos la columna condicion de la tabla Mineral
alter table Mineral
drop column condicion;

select * from Mineral;

-- Queremos actualizar el campo "condicion" para guardar la condición de cada 
-- Mineral segun su Stock.
update Mineral set condicion=
  case
   when Stock>0 then 'Hay stock'
   when Stock<=0 then 'No hay stock'
   else 'No existe producto'
  end;

 select * from Mineral;

-- Mostramos el stock de mineral y se va mostrar disponible y no  disponible
 -- y en una columna extra mostramos un mensaje, ordenamos por cantidad:
 select condicion, count(*) as Stock, resultado=
  case condicion
    when 'Hay stock' then 'Disponible'
    when 'No hay stock' then 'No hay disponible'
    else 'No existe producto'
  end
 from Mineral
 group by condicion
 order by Stock;

go

						-------------------------------------------Vistas--------------------------------


-- Eliminamos la vista "Mineral_Familia;" si existe:
if object_id('Mineral_Familia') is not null
  drop view dbo.Mineral_Familia;
go

Create view Mineral_Familia	
as select M.Mineral, M.Precio, M.Stock, Fm.Familia,Fm.Descripcion
	from Mineral as M
	inner join Familia_Mineral as FM
	on M.ID_Familia_Mineral=FM.ID_Familia_Mineral;
go

select * from  Mineral_Familia;
go

--Eliminamos, si existe la función "Locacion_Establecimiento ":
if object_id('Locacion_Establecimiento') is not null
  drop view Locacion_Establecimiento ;
go

CREATE VIEW Locacion_Establecimiento 
AS SELECT Nro_Establecimiento, Provincia, Localidad, Rubro, Actividad 
  FROM Establecimiento
	INNER JOIN Provincia ON Establecimiento.Nro_Provincia = Provincia.Nro_Provincia
	INNER JOIN Localidad ON Establecimiento.Nro_Localidad = Localidad.Nro_Localidad
	INNER JOIN Actividad ON Establecimiento.ID_Actividad = Actividad.ID_Actividad
	INNER JOIN Rubro ON Establecimiento.Nro_Rubro = Rubro.Nro_Rubro
go

select * from Locacion_Establecimiento 
go

--Eliminamos, si existe la función "Inversores_nacionales  ":
if object_id('Locacion_Establecimiento') is not null
  drop view Locacion_Establecimiento ;
go

CREATE VIEW Inversores_nacionales 
AS 
SELECT ID_Inversion, Monto, Financiamiento 
FROM Inversion
INNER JOIN Financiamiento 
ON Inversion.ID_Financiamiento = Financiamiento.ID_Financiamiento
WHERE Financiamiento LIKE 'Mercado Interno';
go

select * from Inversores_nacionales
go
					------------------------------------------STORED PROCEDURES--------------------------------

--Con este procedimiento mostramos Nro_Cliente, Apellido, Nombre donde el
--Nombre del Cliente empiece con la letra elegida cuando ejecutamos

create proc buscarCliente  @patron varchar(30)
as
	select Nro_Cliente, Apellido, Nombre
	from Cliente
	where Nombre like @patron + '%'

exec buscarCliente 'J'1

drop proc buscarCliente
go

--Con este procedimiento buscamos el Mineral por una letra si la condicion se cumple
--sino ejecuta else donde muestra ID_Mineral,Mineral,Precio,Stock, del numero ingresado para esa variable @int
--que busca el Id_Mineral
create proc obtenerMineral @buscar varchar(30), @intId int
as
	if(select @intId) is null
		select ID_Mineral,Mineral,Precio,Stock
		from Mineral 
		where Mineral like @buscar + '%'
	else 
		select ID_Mineral,Mineral,Precio,Stock
		from Mineral 
		where ID_Mineral = @intId

exec obtenerMineral 'c',null

drop proc obtenerMineral
go

--Con este procedimiento buscamos el descuento q se aplico en Detalle_Orden_Compra
create proc aplicaDescuento @descuento int
as
		select Nro_Detalle, ID_Mineral, Cantidad, Precio
		from Detalle_Orden_Compra
		where Descuento = @descuento

exec aplicaDescuento 30

drop proc aplicaDescuento
go

								---------------------------------FUNCION DE TABLA EN LINEA---------------------------------

--Eliminamos, si existe la función "Establecimeinto_Rubro":
if object_id('Establecimiento_Rubros') is not null
  drop function Establecimiento_Rubros;
go

create function Establecimiento_Rubros --Buscamos que establecimiento tienen el mismo Rubro--
(@rubro tinyint =1)
returns table
as
return
(
	select E.Nombre as Establecimiento,E.Nro_Rubro as Rubro,E.ID_Actividad as Actividad,P.Provincia
	from Establecimiento as E
	inner join Provincia as P 
	on E.Nro_Provincia=P.Nro_Provincia
	where E.Nro_Rubro=@rubro
);

go

-- Llamamos a la función creada anteriormente enviando un Rubro:
select *from Establecimiento_Rubros(2);
go

							---------------------------------FUNCION ESCALAR---------------------------------

--Eliminamos, si existe la función "RealizarDescuento":
if object_id('dbo.RealizarDescuento') is not null
  drop function dbo.RealizarDescuento;
go
 
create function dbo.RealizarDescuento --Realiza un descuento--
(@Cantidad int,
 @Precio int,
 @Descuento decimal (6,2) 
) 
returns int
as
begin

declare @resultado int
declare @ResultadoFinal int 

set @Descuento=(@Descuento/100)
set @resultado=(@Cantidad*@Precio)*@Descuento
set @ResultadoFinal=(@Cantidad*@Precio)-@resultado

return @ResultadoFinal

end;
go

-- Llamamos a la función 
select dbo.RealizarDescuento(100,50,10) as 'Precio Total'
														 
go

					---------------------------------FUNCION DE VARIAS INSTRUCCIONES--------------------------------

if object_id('Traer_Canon') is not null
  drop function Traer_Canon;
go

create Function Traer_Canon --buscamos un canon 
(@valor tinyint
)
returns @Canon table
(
	Nro_Resolucion smallint primary key not null,
	Vigencia_Inicio date,
	Vigencia_Hasta date,
	Nro_Catastro varchar (30),
	Canon tinyint 
)
as
begin
insert @Canon

select Nro_Resolucion,Vigencia_Inicio,Vigencia_Hasta,Nro_Catastro,Canon
from Concesion_Explotacion
where @valor>=Canon
return
end;

go

select *from Traer_Canon(30)
go		
							
							---------------------------------Manejo de Errores--------------------------------
--Try and Catch
BEGIN TRY
	
	insert into Rubro (Rubro,Nro_Rubro)
	values ('explotación',3) 
END TRY
BEGIN CATCH
  SELECT
    ERROR_NUMBER() AS ErrorNumber,
    ERROR_STATE() AS ErrorState,
    ERROR_SEVERITY() AS ErrorSeverity,
    ERROR_PROCEDURE() AS ErrorProcedure,
    ERROR_LINE() AS ErrorLine,
    ERROR_MESSAGE() AS ErrorMessage;
END CATCH;
go

--Throw
--Inserta un cliente ya existente							
BEGIN TRY 
    insert into Cliente (Nro_Cliente,Apellido,Nombre)
	values (1,'Barrientos','Julian');
END TRY
BEGIN CATCH
  select 'PK ya existente'
  THROW;
END CATCH
go

--Throw
--Eliminamos un Clave Fk
BEGIN TRY 
    DELETE from Yacimiento
     where ID_Mineral =2;  --error, hay hasta 3
END TRY
BEGIN CATCH
  select 'Error. Clave referenciada'
  THROW;
END CATCH

go


--Mensaje Personalizado
EXEC sys.sp_addmessage 
    @msgnum = 60001, 
    @severity = 10, 
    @msgtext =
    N'El Cliente %s no puede ser borrado porque no existe.', 
    @lang = 'us_english';   

--declaro la variable y formateo el mensaje
DECLARE @MessageText NVARCHAR(2048);
SET @MessageText =  FORMATMESSAGE(60001, N'6');   

--lanzo el mensaje
THROW 60001, @MessageText, 1; 

--salida del mensaje
Msg 60001, Level 10, State 1, Line 8
El numero de cliente 6 no puede ser borrado porque no existe.

go

---------------creamos un procedimiento que genere un error ingresando mal los datos--------------
CREATE PROCEDURE ExcepcionProvincia
AS 
	BEGIN TRY
		Insert into Provincia (Nro_Provincia,Provincia)
		values ('Buenos Aires', 1)
	END TRY
	BEGIN CATCH
		select Error_Message() As ErrorMessage;
	END CATCH

Exec ExcepcionProvincia